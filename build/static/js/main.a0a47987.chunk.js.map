{"version":3,"sources":["components/Header.jsx","context/CategoriasContext.jsx","context/RecetasContext.jsx","components/Formulario.jsx","context/ModalContext.jsx","components/Receta.jsx","components/Listarecetas.jsx","App.js","serviceWorker.js","index.js"],"names":["Header","className","CategoriasContext","createContext","CategoriasProvider","props","useState","categorias","guardarCategorias","useEffect","a","axios","data","drinks","obtenerCategorias","Provider","value","children","RecetasContext","RecetasProvider","consulta","guardarConsulta","recetas","guardarRecetas","nombre","busqueda","buscarRecetas","categoria","url","receta","obtenerListado","Formulario","guardarBusqueda","error","guardarError","useContext","obtenerDatosReceta","e","target","name","onSubmit","preventDefault","type","placeholder","onChange","autoComplete","id","map","key","strCategory","ModalContext","ModalProvider","idrecetas","guardarIdrecetas","guardarDetalles","response","obtenerReceta","Receta","strDrink","src","strDrinkThumb","alt","srtDrink","onClick","idDrink","Listarecetas","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.a0a47987.chunk.js","sourcesContent":["import React from 'react'\n\nexport const Header = () => {\n    return (\n        <header className=\"bg-header\">\n            <h1>Busca tu Receta</h1>\n        </header>\n    )\n}\n","import React, { createContext, useState, useEffect } from 'react'\nimport axios from 'axios';\n\n// Crear el context\nexport const CategoriasContext = createContext();\n\n// Provider es donde se encuentran las funciones y state\nconst CategoriasProvider = (props) => {\n    // crear el state del context\n    const [categorias, guardarCategorias] = useState([]);\n\n    // Ejecutar llamado a la api\n    useEffect(() => {\n        const obtenerCategorias = async() =>{\n            const url = `https://www.thecocktaildb.com/api/json/v1/1/list.php?c=list`;\n            const categorias = await axios(url);\n            guardarCategorias(categorias.data.drinks);\n        }\n        obtenerCategorias();\n    }, [])\n\n    return (\n        <CategoriasContext.Provider\n            value={{\n                categorias\n            }}\n            >\n            {props.children}\n        </CategoriasContext.Provider>\n    )\n}\nexport default CategoriasProvider;","import React, { createContext, useState, useEffect } from 'react'\nimport axios from 'axios';\nexport const RecetasContext = createContext();\n\nconst RecetasProvider = (props) => {\n\n    const [consulta, guardarConsulta] = useState(false);\n    const [recetas, guardarRecetas] = useState([]);\n    const [busqueda, buscarRecetas] = useState({\n      nombre: \"\",\n      categorias: \"\"\n    })\n\n    const {nombre, categoria} = busqueda;\n    useEffect(()=>{\n        if(consulta){\n            const obtenerListado = async() =>{\n                const url = `https://www.thecocktaildb.com/api/json/v1/1/filter.php?c=${nombre}&c=${categoria}`\n                const receta = await axios(url)\n                guardarRecetas(receta.data.drinks);\n            }\n            obtenerListado();\n        }\n    }, [nombre, categoria])\n    return (\n      <RecetasContext.Provider value={{ buscarRecetas, guardarConsulta, recetas }}>\n        {props.children}\n      </RecetasContext.Provider>\n    );\n}\n \nexport default RecetasProvider;","import React, { useContext, useState } from 'react'\nimport { CategoriasContext } from '../context/CategoriasContext';\nimport { RecetasContext } from '../context/RecetasContext';\nexport const Formulario = () => {\n\n    const [ busqueda, guardarBusqueda] = useState({\n        nombre:\"\",\n        categoria:\"\"\n    })\n    const [error, guardarError] = useState(false);\n\n    const { categorias } = useContext(CategoriasContext); \n\n    const { buscarRecetas, guardarConsulta } = useContext(RecetasContext);\n    \n    // funcion para leer el contenido\n    const obtenerDatosReceta = (e) => {\n        guardarBusqueda({\n          ...busqueda,\n          [e.target.name]: e.target.value,\n        });\n        guardarError(false);\n    }\n\n    return (\n      <form\n        onSubmit={(e) => {\n          e.preventDefault();\n          if(busqueda.nombre ==='' || busqueda.categoria ===''){\n              guardarError(true);\n          }\n          buscarRecetas(busqueda);\n          guardarConsulta(true);\n          \n        }}\n        className=\"col-12\"\n      >\n        <fieldset className=\"text-center\">\n          <legend>Busca tu bebida por categoria o ingrediente</legend>\n        </fieldset>\n        { error ? <div className=\"alert alert-warning text-center\">Todos los campos son obligatorios</div> : null}\n        <div className=\"row mt-4\">\n          <div className=\"col-md-4\">\n            <input\n              name=\"nombre\"\n              className=\"form-control\"\n              type=\"text\"\n              placeholder=\"Buscar por ingrediente\"\n              onChange={obtenerDatosReceta}\n              autoComplete=\"off\"\n            />\n          </div>\n          <div className=\"col-md-4\">\n            <select\n              name=\"categoria\"\n              onChange={obtenerDatosReceta}\n              className=\"form-control\"\n              id=\"\"\n            >\n              <option value=\"\">-Selecciona una opcion</option>\n              {categorias.map((categoria) => (\n                <option\n                  key={categoria.strCategory}\n                  value={categoria.strCategory}\n                >\n                  {categoria.strCategory}\n                </option>\n              ))}\n            </select>\n          </div>\n          <div className=\"col-md-4\">\n            <input\n              type=\"submit\"\n              className=\"btn btn-block btn-primary\"\n              value=\"Buscar recetas\"\n            />\n          </div>\n        </div>\n      </form>\n    );\n}\n","import React,{createContext, useEffect, useState} from 'react'\nimport axios from 'axios';\nimport { Receta } from '../components/Receta';\n\n\n// crear context\nexport const ModalContext = createContext();\n\nconst ModalProvider = (props) => {\n\n    const [idrecetas, guardarIdrecetas] = useState(null);\n    const [detalles, guardarDetalles] = useState();\n\n    useEffect( ()=>{\n        if(!idrecetas) return;\n        const obtenerReceta = async() => {\n            const url = `https://www.thecocktaildb.com/api/json/v1/1/lookup.php?i=${idrecetas}`;\n            const response = await axios(url);\n            guardarDetalles(response.data.drinks[0]);\n        }\n        obtenerReceta();\n    }, [idrecetas] )\n    \n    return (\n        <ModalContext.Provider\n            value={{\n                idrecetas,\n                guardarIdrecetas\n            }}\n        >\n            {props.children}\n        </ModalContext.Provider>\n    );\n}\n \nexport default ModalProvider;","import React, { useContext, useMemo } from 'react'\nimport PropTypes from 'prop-types'\nimport { ModalContext } from '../context/ModalContext';\n\nexport const Receta = ({receta}) => {\n\n    const {guardarIdrecetas} = useContext(ModalContext);\n    return (\n      <div className=\"col-md-4 mb-4\">\n        <div className=\"card\">\n          <h2 className=\"card-header\">{receta.strDrink}</h2>\n          <img className=\"card-img-top\" src={receta.strDrinkThumb} alt={`Imagen de ${receta.srtDrink}`}/>\n          <div className=\"card-body\">\n          <button\n            className=\"btn btn-block btn-primary\"\n            type=\"button\"\n            onClick={ ()=>{\n                guardarIdrecetas(receta.idDrink)\n            }}\n            >Ver receta</button>\n          </div>\n        </div>\n      </div>\n    );\n}\nReceta.propTypes = {\n    receta: PropTypes.object.isRequired\n}","import React, { useContext } from 'react'\n// import PropTypes from 'prop-types'\nimport { RecetasContext } from '../context/RecetasContext';\nimport { Receta } from './Receta';\n\nconst Listarecetas = () => {\n\n    const { recetas } = useContext(RecetasContext);\n    return (\n      <div className=\"row mt-5\">\n        {recetas ? (recetas.map((receta) => (\n          <Receta key={receta.idDrink} receta={receta}/>\n        ))) : null }\n      </div>\n    );\n}\n\nexport default Listarecetas\n","import React from 'react';\nimport { Header } from './components/Header';\nimport { Formulario } from './components/Formulario';\nimport CategoriasProvider from './context/CategoriasContext';\nimport RecetasProvider from './context/RecetasContext';\nimport Listarecetas from './components/Listarecetas';\nimport ModalProvider from './context/ModalContext';\n\nfunction App() {\n  return (\n    <CategoriasProvider>\n      <RecetasProvider>\n        <ModalProvider>\n          <Header />\n          <div className=\"container mt-5\">\n            <div className=\"row\">\n              <Formulario />\n            </div>\n            <Listarecetas />\n          </div>\n        </ModalProvider>\n      </RecetasProvider>\n    </CategoriasProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './bootstrap.min.css'\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}